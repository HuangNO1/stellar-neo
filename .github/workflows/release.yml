# GitHub Actions 工作流程名稱
name: Build and Release StellarNeo

# 工作流程觸發條件
on:
  # 允許手動從 Actions 頁面觸發
  workflow_dispatch:
  # 當建立一個符合 'v*.*.*' 格式的標籤時觸發
  push:
    tags:
      - 'v*.*.*'

# 工作流程執行的任務
jobs:
  # 任務一：先建立一個 GitHub Release 草稿，以獲取上傳 URL
  create_release:
    name: Create Release Draft
    runs-on: ubuntu-latest
    # 輸出 upload_url 給後續的 build 任務使用
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    # 核心修正：為此任務明確申請寫入內容的權限
    permissions:
      contents: write

    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # 使用 github.ref_name 來取得乾淨的標籤名稱 (例如 "v1.0.1")
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            New release of StellarNeo.
            See the commit history for details.
          # 先建立為草稿，等所有檔案上傳完畢後再手動發布
          draft: true
          prerelease: false

  # 任務二：在不同作業系統上打包應用程式，並上傳到 Release
  build:
    name: Build on ${{ matrix.os }}
    # 聲明此任務需要等待 'create_release' 任務完成
    needs: create_release
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      # 步驟 1: 簽出 (Checkout) 您的專案程式碼
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步驟 2: 設定 Python 環境
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # 步驟 3: 安裝依賴套件
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # 步驟 4: (僅限 Linux) 安裝 Qt 相關的系統依賴
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-glx libegl1-mesa libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0

      # 步驟 5: 使用 PyInstaller 進行打包
      - name: Build with PyInstaller
        run: pyinstaller StellarNeo.spec

      # 步驟 6: 準備要上傳的檔案 (壓縮)
      - name: Prepare artifact for release
        shell: bash
        run: |
          VERSION=${{ github.ref_name }}
          
          if [ "${{ runner.os }}" == "Windows" ]; then
            ARTIFACT_NAME="StellarNeo-${VERSION}-windows-x64"
            7z a -tzip "${ARTIFACT_NAME}.zip" "./dist/StellarNeo/*"
            echo "ASSET=${ARTIFACT_NAME}.zip" >> $GITHUB_ENV
          elif [ "${{ runner.os }}" == "macOS" ]; then
            # 在 macOS 上，PyInstaller 會產生一個 .app 的資料夾
            ARTIFACT_NAME="StellarNeo-${VERSION}-macos-x64"
            tar -czf "${ARTIFACT_NAME}.tar.gz" -C "./dist" "StellarNeo.app"
            echo "ASSET=${ARTIFACT_NAME}.tar.gz" >> $GITHUB_ENV
          else # Linux
            ARTIFACT_NAME="StellarNeo-${VERSION}-linux-x64"
            tar -czf "${ARTIFACT_NAME}.tar.gz" -C "./dist" "StellarNeo"
            echo "ASSET=${ARTIFACT_NAME}.tar.gz" >> $GITHUB_ENV
          fi

      # 步驟 7: 上傳打包好的檔案到 Release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # 從 'create_release' 任務獲取上傳 URL
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
